#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain = Brain()

# Robot configuration code
motor_1 = Motor(Ports.PORT1, GearSetting.RATIO_36_1, False)
motor_2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1, True)
limit_switch_a = Limit(brain.three_wire_port.a)
bumper_b = Bumper(brain.three_wire_port.b)  # Bumper used to detect wall
bumper_c = Bumper(brain.three_wire_port.c)

# wait for rotation sensor to fully initialize
wait(30, MSEC)

# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))

# Set random seed
initializeRandomSeed()

def play_vexcode_sound(sound_name):
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

wait(200, MSEC)
print("\033[2J")
#endregion VEXcode Generated Robot Configuration

# global variable for controlling program state
myVariable = 0

# Function to drive straight for a given distance
def drive_straight():
    motor_1.spin_for(720, DEGREES, 40, PERCENT, False)  # Move forward 1440 degrees
    motor_2.spin_for(720, DEGREES, 40, PERCENT, False)
    wait(1, SECONDS)

# Function to back up a bit (reverse a small distance)
def back_up():
    motor_1.spin_for(-180, DEGREES, 65, PERCENT, False)  # Move backward 720 degrees
    motor_2.spin_for(-180, DEGREES, 65, PERCENT, False)
    wait(2, SECONDS)

# Function to turn 180 degrees
def turn_180():
    motor_1.spin_for(360, DEGREES, 40, PERCENT, False)   # Turn 180 degrees right
    motor_2.spin_for(-360, DEGREES, 80, PERCENT, False)
    wait(1, SECONDS)

# Function to execute when the program starts
def when_started1():
    global myVariable
    brake_type = False  # Whether or not to brake at the end
    condition = False
    brain.screen.print("Press the bumper on top to start.")  # Display the start message
    
    # Wait for the bumper to be pressed to start
    while not bumper_b.pressing():
        wait(5, MSEC)
    
    brain.screen.print("Starting...")
    wait(0.5, SECONDS)
    
    # Drive forward until bumper is pressed
    drive_straight()

    # Wait for the bumper to be pressed (indicating wall collision)
    while not limit_switch_a.pressing():
        wait(1, SECONDS)
    
    # Once the bumper is pressed, back up a bit
    back_up()

    # Then turn 180 degrees
    turn_180()

    brain.screen.print("Finished!")
    wait(2, SECONDS)  # Pause before stopping

# Call when_started1 function to start the program
when_started1()
