#region VEXcode Generated Robot Configuration
from vex import *

# Brain should be defined by default
brain=Brain()

#config
motor_1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)
motor_2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)
bumper_c = Bumper(brain.three_wire_port.c)
range_finder_a = Sonar(brain.three_wire_port.a)

# Wait for rotation sensor to fully initialize
wait(30, MSEC)

# Add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# Clear the console to make sure we don't have the REPL in the console
print("\033[2J")

# global variable
myVariable = 0

def turn_wall():
    motor_1.spin(FORWARD, 35, PERCENT, False)   # Turn
    motor_2.spin(REVERSE, 90, PERCENT, False)
    wait(1, SECONDS)  # Wait for the turn to complete
    motor_1.stop()
    motor_2.stop()
    wait(0.5, SECONDS)  # small delay before continuing

def drive_indef():
    # Spin motors indefinitely
    motor_1.spin(FORWARD, 40, PERCENT)
    motor_2.spin(FORWARD, 40, PERCENT)

def drive_until():
    drive_indef()

    while True:
        # Read distance
        distance = range_finder_a.distance(MM)
        
        #check if the distance is less than or equal to 18 in
        if distance <= 508:
            brain.screen.print("Wall detected! Turning...")
            turn_wall()  # Turn when wall is detected
            wait(1, SECONDS) 
        else:
            brain.screen.print("No wall detected. Waiting...")
            motor_1.stop()
            motor_2.stop()  
            wait(2, SECONDS)  

            # restart after waiting
            drive_indef()

        wait(100, MSEC)  # Small delay to prevent tight loop, still checks sensor

# start program
def when_started1():
    global myVariable
    condition = False
    brain.screen.print("Press the bumper to start.")  # Display the start message
    
    while not bumper_c.pressing():
        wait(5, MSEC)  # Keep checking for the bumper press
    
    brain.screen.print("Starting...")

    # start the driving logic
    drive_until()

    brain.screen.print("Finished!")
    wait(2, SECONDS)  # Pause before stopping
when_started1()
