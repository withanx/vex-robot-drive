#region VEXcode Generated Robot Configuration
from vex import *

# Brain should be defined by default
brain=Brain()

# Robot configuration code
limit_switch_a = Limit(brain.three_wire_port.a)
motor_1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)
motor_2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)
bumper_b = Bumper(brain.three_wire_port.b)

# wait for rotation sensor to fully initialize
wait(30, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")


# global variable for controlling program state
myVariable = 0


def drive_straight():
    motor_1.spin_for(720, DEGREES, 40, PERCENT, False)  # Move forward
    motor_2.spin_for(720, DEGREES, 40, PERCENT, False)
    wait(1, SECONDS)


def back_up():
    motor_1.spin_for(-240, DEGREES, 65, PERCENT, False)  # Move backward
    motor_2.spin_for(-240, DEGREES, 65, PERCENT, False)
    wait(2, SECONDS)


def turn_180():
    motor_1.spin_for(360, DEGREES, 30, PERCENT, False)   # Turn
    motor_2.spin_for(-540, DEGREES, 85, PERCENT, False)
    wait(1, SECONDS)

# Function to execute when the program starts
def when_started1():
    global myVariable
    brake_type = False  # Whether or not to brake at the end
    condition = False
    brain.screen.print("Press the bumper on top to start.")  # Display the start message
    
    # Wait for the bumper to be pressed to start
    while not bumper_b.pressing():
        wait(5, MSEC)
    
    brain.screen.print("Starting...")
    wait(0.5, SECONDS)
    
    # Drive forward until bumper is pressed
    drive_straight()
    wait(1, SECONDS)

    # Wait for the bumper to be pressed (indicating wall collision)
    while not limit_switch_a.pressing():
        wait(1, SECONDS)
    
    # Once the bumper is pressed, back up a bit
    back_up()
    wait(1, SECONDS)

    # Then turn 180 degrees
    turn_180()
    wait(1, SECONDS)
       
    brain.screen.print("Finished!")
    wait(2, SECONDS)  # Pause before stopping

# Call when_started1 function to start the program
when_started1()
